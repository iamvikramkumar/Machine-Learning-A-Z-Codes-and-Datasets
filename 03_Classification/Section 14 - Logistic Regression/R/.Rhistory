library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.8)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
head(training_set)
training_set[-3]=scale(training_set[-3])
test_set[-3]=scale(test_set[-3])
head(training_set)
#6. Fiiting the logistic Regression on training set
classifier=glm(formula = Purchased~.,
family=binomial,
data=training_set)
#7. Predicting the test set results
prob_pred=predict(classifier, type='response',newdata=test_set[-3])
y_pred= ifelse(prob_pred>0.5,1,0)
#cm= table (actual_value,predicted_value)
cm=table(test_set[,3],y_pred)
cm
cm=table(test_set[,3],y_pred>0.5)
cm
# Logistic Regression
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
View(dataset)
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
head(training_set)
# Feature Scaling
training_set[-3]= scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
head(training_set[-3])
head(test_set)
# Fitting Logistic Regression to the Training set
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
# Predicting the Test set results
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred )
cm
#1. Load the dataset
dataset=read.csv('Social_Network_Ads.csv')
View(dataset)
str(dataset)
dataset=dataset[3:5]
View(dataset)
#2. checking for missing or null values
sum(is.na(dataset))
#3.Feature selection
dataset$Purchased=factor(dataset$Purchased,levels=c(0,1))
#4.Splitting the dataset into training and test set
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.8)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
head(training_set)
#5. Scaling- exclusing the Purchased variable out of the dataset
#where we currently have Age,EstimatedSalary and Purchased as variables
training_set[-3]=scale(training_set[-3])
test_set[-3]=scale(test_set[-3])
head(training_set)
#6. Fiiting the logistic Regression on training set
classifier=glm(formula = Purchased~.,
family=binomial,
data=training_set)
#7. Predicting the test set results
prob_pred=predict(classifier, type='response',newdata=test_set[-3])
y_pred= ifelse(prob_pred>0.5,1,0)
#8. Confusion Matrix
#cm= table (actual_value,predicted_value)
cm=table(test_set[,3],y_pred>0.5)
cm
# Logistic Regression
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
View(dataset)
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
head(training_set)
# Feature Scaling
training_set[-3]= scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
head(training_set[-3])
head(test_set)
# Fitting Logistic Regression to the Training set
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
# Predicting the Test set results
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred )
cm
#1. Load the dataset
dataset=read.csv('Social_Network_Ads.csv')
View(dataset)
str(dataset)
dataset=dataset[3:5]
View(dataset)
#2. checking for missing or null values
sum(is.na(dataset))
#3.Feature selection
dataset$Purchased=factor(dataset$Purchased,levels=c(0,1))
#4.Splitting the dataset into training and test set
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.8)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
head(training_set)
#5. Scaling- exclusing the Purchased variable out of the dataset
#where we currently have Age,EstimatedSalary and Purchased as variables
training_set[-3]=scale(training_set[-3])
test_set[-3]=scale(test_set[-3])
head(training_set)
#6. Fiiting the logistic Regression on training set
classifier=glm(formula = Purchased~.,
family=binomial,
data=training_set)
#7. Predicting the test set results
prob_pred=predict(classifier, type='response',newdata=test_set[-3])
y_pred= ifelse(prob_pred>0.5,1,0)
#8. Confusion Matrix
#cm= table (actual_value,predicted_value)
cm=table(test_set[,3],y_pred>0.5)
cm
#1. Load the dataset
dataset=read.csv('Social_Network_Ads.csv')
View(dataset)
str(dataset)
dataset=dataset[3:5]
View(dataset)
#2. checking for missing or null values
sum(is.na(dataset))
#3.Feature selection
dataset$Purchased=factor(dataset$Purchased,levels=c(0,1))
#4.Splitting the dataset into training and test set
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.85)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
head(training_set)
#5. Scaling- exclusing the Purchased variable out of the dataset
#where we currently have Age,EstimatedSalary and Purchased as variables
training_set[-3]=scale(training_set[-3])
test_set[-3]=scale(test_set[-3])
head(training_set)
#6. Fiiting the logistic Regression on training set
classifier=glm(formula = Purchased~.,
family=binomial,
data=training_set)
#7. Predicting the test set results
prob_pred=predict(classifier, type='response',newdata=test_set[-3])
y_pred= ifelse(prob_pred>0.5,1,0)
#8. Confusion Matrix
#cm= table (actual_value,predicted_value)
cm=table(test_set[,3],y_pred>0.5)
cm
cm=table(dataset[,3],y_pred>0.5)
cm
#1. Load the dataset
dataset=read.csv('Social_Network_Ads.csv')
View(dataset)
str(dataset)
dataset=dataset[3:5]
View(dataset)
#2. checking for missing or null values
sum(is.na(dataset))
#3.Feature selection
dataset$Purchased=factor(dataset$Purchased,levels=c(0,1))
#4.Splitting the dataset into training and test set
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.85)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
head(training_set)
#5. Scaling- exclusing the Purchased variable out of the dataset
#where we currently have Age,EstimatedSalary and Purchased as variables
training_set[-3]=scale(training_set[-3])
test_set[-3]=scale(test_set[-3])
head(training_set)
#6. Fiiting the logistic Regression on training set
classifier=glm(formula = Purchased~.,
family=binomial,
data=training_set)
#7. Predicting the test set results
prob_pred=predict(classifier, type='response',newdata=test_set[-3])
y_pred= ifelse(prob_pred>0.5,1,0)
#8. Confusion Matrix
#cm= table (actual_value,predicted_value)
cm=table(dataset[,3],y_pred>0.5)
cm
#1. Load the dataset
dataset=read.csv('Social_Network_Ads.csv')
View(dataset)
str(dataset)
dataset=dataset[3:5]
View(dataset)
#2. checking for missing or null values
sum(is.na(dataset))
#3.Feature selection
dataset$Purchased=factor(dataset$Purchased,levels=c(0,1))
#4.Splitting the dataset into training and test set
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.85)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
head(training_set)
#5. Scaling- exclusing the Purchased variable out of the dataset
#where we currently have Age,EstimatedSalary and Purchased as variables
training_set[-3]=scale(training_set[-3])
test_set[-3]=scale(test_set[-3])
head(training_set)
#6. Fiiting the logistic Regression on training set
classifier=glm(formula = Purchased~.,
family=binomial,
data=training_set)
#7. Predicting the test set results
prob_pred=predict(classifier, type='response',newdata=test_set[-3])
y_pred= ifelse(prob_pred>0.5,1,0)
#8. Confusion Matrix
#cm= table (actual_value,predicted_value)
cm=table(test_set[,3],y_pred>0.5)
cm
#Accuracy= 47/60*100=78.33
#9. Visualization-Training Set
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
#1. Load the dataset
dataset=read.csv('Social_Network_Ads.csv')
View(dataset)
str(dataset)
dataset=dataset[3:5]
View(dataset)
#2. checking for missing or null values
sum(is.na(dataset))
#3.Feature selection
dataset$Purchased=factor(dataset$Purchased,levels=c(0,1))
#4.Splitting the dataset into training and test set
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.85)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
head(training_set)
#5. Scaling- exclusing the Purchased variable out of the dataset
#where we currently have Age,EstimatedSalary and Purchased as variables
training_set[-3]=scale(training_set[-3])
test_set[-3]=scale(test_set[-3])
head(training_set)
#6. Fiiting the logistic Regression on training set
classifier=glm(formula = Purchased~.,
family=binomial,
data=training_set)
#7. Predicting the test set results
prob_pred=predict(classifier, type='response',newdata=test_set[-3])
y_pred= ifelse(prob_pred>0.5,1,0)
#8. Confusion Matrix
#cm= table (actual_value,predicted_value)
cm=table(test_set[,3],y_pred>0.5)
cm
#Accuracy= 47/60*100=78.33
#9. Visualization-Training Set
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
data=read.csv('Social_Network_Ads.csv')
data = data[3:5]
colSums(is.na(data))
data$Purchased = factor(data$Purchased,levels = c(0,1))
head(data)
library(caTools)
split= sample.split(data$Purchased, SplitRatio = 0.7)
train_set = subset(data, split = TRUE)
test_set = subset(data, split = FALSE)
# scalling
# excluding the purchased variable out of dataset
# where we currently have age , estimated salary & purchased as variable
train_set[-3]=scale(train_set[-3])
test_set[-3]=scale(test_set[-3])
head(train_set)
fit_glm = glm(formula = Purchased ~., family = "binomial",data = train_set)
Pred_glm = predict(fit_glm,type = "response",newdata = test_set[-3])
y_gml = ifelse(Pred_glm>0.5, 1, 0)
#table(actual value,predicted value)
cm=table(test_set[,3], y_gml)
cm
data=read.csv('Social_Network_Ads.csv')
data = data[3:5]
colSums(is.na(data))
data$Purchased = factor(data$Purchased,levels = c(0,1))
head(data)
library(caTools)
split= sample.split(data$Purchased, SplitRatio = 0.8)
train_set = subset(data, split = TRUE)
test_set = subset(data, split = FALSE)
# scalling
# excluding the purchased variable out of dataset
# where we currently have age , estimated salary & purchased as variable
train_set[-3]=scale(train_set[-3])
test_set[-3]=scale(test_set[-3])
head(train_set)
fit_glm = glm(formula = Purchased ~., family = "binomial",data = train_set)
Pred_glm = predict(fit_glm,type = "response",newdata = test_set[-3])
y_gml = ifelse(Pred_glm>0.5, 1, 0)
#table(actual value,predicted value)
cm=table(test_set[,3], y_gml)
cm
# Logistic Regression
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
View(dataset)
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
head(training_set)
# Feature Scaling
training_set[-3]= scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
head(training_set[-3])
head(test_set)
# Fitting Logistic Regression to the Training set
classifier = glm(formula = Purchased ~ .,
family = "binomial",
data = training_set)
# Predicting the Test set results
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred )
cm
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Logistic Regression
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
View(dataset)
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.7)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
head(training_set)
# Feature Scaling
training_set[-3]= scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
head(training_set[-3])
head(test_set)
# Fitting Logistic Regression to the Training set
classifier = glm(formula = Purchased ~ .,
family = "binomial",
data = training_set)
# Predicting the Test set results
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred )
cm
120/400
data=read.csv('Social_Network_Ads.csv')
data = data[3:5]
colSums(is.na(data))
data$Purchased = factor(data$Purchased,levels = c(0,1))
head(data)
library(caTools)
split= sample.split(data$Purchased, SplitRatio = 0.8)
train_set = subset(data, split = TRUE)
test_set = subset(data, split = FALSE)
# scalling
# excluding the purchased variable out of dataset
# where we currently have age , estimated salary & purchased as variable
train_set[-3]=scale(train_set[-3])
test_set[-3]=scale(test_set[-3])
head(train_set)
fit_glm = glm(formula = Purchased ~., family = "binomial",data = train_set)
Pred_glm = predict(fit_glm,type = "response",newdata = test_set[-3])
y_gml = ifelse(Pred_glm>0.5, 1, 0)
#table(actual value,predicted value)
cm=table(test_set[, 3], y_gml)
cm
data=read.csv('Social_Network_Ads.csv')
data = data[3:5]
colSums(is.na(data))
data$Purchased = factor(data$Purchased,levels = c(0,1))
head(data)
library(caTools)
split= sample.split(data$Purchased, SplitRatio = 0.8)
train_set = subset(data, split == TRUE)
test_set = subset(data, split == FALSE)
# scalling
# excluding the purchased variable out of dataset
# where we currently have age , estimated salary & purchased as variable
train_set[-3]=scale(train_set[-3])
test_set[-3]=scale(test_set[-3])
head(train_set)
fit_glm = glm(formula = Purchased ~., family = "binomial",data = train_set)
Pred_glm = predict(fit_glm,type = "response",newdata = test_set[-3])
y_gml = ifelse(Pred_glm>0.5, 1, 0)
#table(actual value,predicted value)
cm=table(test_set[, 3], y_gml)
cm
setwd("C:/1_Study material/Machine Learning using R/Machine Learning A-Z (Codes and Datasets)/Part 3 - Classification/Section 14 - Logistic Regression/R")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
View(dataset)
