classifier
d3=read_delim(file.choose(),delim = "\t",col_names = FALSE)
library(readr)
d3=read_delim(file.choose(),delim = "\t",col_names = FALSE)
d3=read_delim(file.choose(),delim = "\t")
v1 = 10:12
v2 = c("a", "b","c")
df = data.frame(v1,v2)
str(df)
rno=c(1:5)
name=c("A","B","C","D","E")
age = c(15,18,14,20,19)
df=data.frame(rno,name,age)
df
df[1,2]
a)	patient = c(1,2,3,4,5)
diagnosis = c("B","B","M","B", "M")
df=data.frame(patient,diagnosis)
diagnosis=factor(diagnosis,labels= c("Benign", "Malignant"))
patient = c(1,2,3,4,5)
diagnosis = c("B","B","M","B", "M")
df=data.frame(patient,diagnosis)
df
diagnosis=factor(diagnosis,labels= c("Benign", "Malignant"))
df
df$diagnosis=factor(df$diagnosis,labels=c("Benign", "Malignant"))
df
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
library(bibliometrix)
d2=read.csv(file.choose())
View(d2)
#Dataset- housepricing.csv
#Predict the SalePrice of a house if LotFrontage,
#LotArea,GarageArea and OverallCond are known to you
d2=d2[c("SalePrice","LotFrontage","LotArea","GarageArea","OverallCond")]
sum(is.na(d2))
missing=d2[!complete.cases(d2),]
View(missing)
d2=d2[-2]
missing=d2[!complete.cases(d2),]
View(missing)
sum(is.na(d2))
#Dataset- housepricing.csv
#Predict the SalePrice of a house if LotFrontage,
#LotArea,GarageArea and OverallCond are known to you
d2=d2[c("SalePrice","LotFrontage","LotArea",
"GarageArea","OverallCond")]
d2=read.csv(file.choose())
#Dataset- housepricing.csv
#Predict the SalePrice of a house if LotFrontage,
#LotArea,GarageArea and OverallCond are known to you
d2=d2[c("SalePrice","LotFrontage","LotArea",
"GarageArea","OverallCond")]
sum(is.na(d2))
d2$LotFrontage=ifelse(is.na(d2$LotFrontage),
mean(d2$LotFrontage,na.rm=TRUE),
d2$LotFrontage)
sum(is.na(d2))
#splitting dataset
library(caTools)
split=sample.split(d2$SalePrice,SplitRatio=2/3)
train2=subset(d2,split==TRUE)
test2=subset(d2,split==FALSE)
1086+374
#scaling
train2[-1]=scale(train2[-1])
test2[-1]=scale(test2[-1])
View(d2)
train2[-1]
#Building MLR multiple linear regression
regressor=lm(formula=SalePrice~.,data=train)
#Building MLR multiple linear regression
regressor=lm(formula=SalePrice~.,data=train2)
summary(regressor)
ypred=predict(regressor,test2)
library(ModelMetrics)
rmse(ypred,test2[1])
rmse(ypred,test2$SalePrice)
#Dataset- housepricing.csv
#Predict the SalePrice of a house if LotFrontage,
#LotArea,GarageArea and OverallCond are known to you
d2=d2[c("SalePrice","LotFrontage","LotArea",
"GarageArea")]
sum(is.na(d2))
missing=d2[!complete.cases(d2),]
d2$LotFrontage=ifelse(is.na(d2$LotFrontage),
mean(d2$LotFrontage,na.rm=TRUE),
d2$LotFrontage)
#splitting dataset
library(caTools)
split=sample.split(d2$SalePrice,SplitRatio=2/3)
train2=subset(d2,split==TRUE)
test2=subset(d2,split==FALSE)
#scaling
train2[-1]=scale(train2[-1])
test2[-1]=scale(test2[-1])
#Building MLR multiple linear regression
regressor=lm(formula=SalePrice~.,data=train2)
summary(regressor)
ypred=predict(regressor,test2)
#Dataset- housepricing.csv
#Predict the SalePrice of a house if LotFrontage,
#LotArea,GarageArea and OverallCond are known to you
d2=d2[c("SalePrice","LotArea",
"GarageArea","OverallCond")]
sum(is.na(d2))
#splitting dataset
library(caTools)
split=sample.split(d2$SalePrice,SplitRatio=2/3)
train2=subset(d2,split==TRUE)
test2=subset(d2,split==FALSE)
#scaling
train2[-1]=scale(train2[-1])
test2[-1]=scale(test2[-1])
#Building MLR multiple linear regression
regressor=lm(formula=SalePrice~.,data=train2)
summary(regressor)
ypred=predict(regressor,test2)
library(ModelMetrics)
rmse(ypred,test2$SalePrice)
#Dataset- housepricing.csv
#Predict the SalePrice of a house if LotFrontage,
#LotArea,GarageArea and OverallCond are known to you
d2=d2[c("SalePrice","LotFrontage",
"GarageArea","OverallCond")]
#Dataset- housepricing.csv
#Predict the SalePrice of a house if LotFrontage,
#LotArea,GarageArea and OverallCond are known to you
d2=d2[c("SalePrice","LotFrontage","GarageArea","OverallCond")]
#Dataset- housepricing.csv
#Predict the SalePrice of a house if LotFrontage,
#LotArea,GarageArea and OverallCond are known to you
d2=d2[c("SalePrice","LotFrontage","GarageArea","OverallCond")]
d2=read.csv(file.choose())
#Dataset- housepricing.csv
#Predict the SalePrice of a house if LotFrontage,
#LotArea,GarageArea and OverallCond are known to you
d2=d2[c("SalePrice","LotFrontage","GarageArea","OverallCond")]
sum(is.na(d2))
missing=d2[!complete.cases(d2),]
View(missing)
d2$LotFrontage=ifelse(is.na(d2$LotFrontage),
mean(d2$LotFrontage,na.rm=TRUE),
d2$LotFrontage)
#splitting dataset
library(caTools)
split=sample.split(d2$SalePrice,SplitRatio=2/3)
train2=subset(d2,split==TRUE)
test2=subset(d2,split==FALSE)
#scaling
train2[-1]=scale(train2[-1])
test2[-1]=scale(test2[-1])
#Building MLR multiple linear regression
regressor=lm(formula=SalePrice~.,data=train2)
summary(regressor)
#Dataset- housepricing.csv
#Predict the SalePrice of a house if LotFrontage,
#LotArea,GarageArea and OverallCond are known to you
d2=d2[c("SalePrice","LotFrontage","GarageArea")]
sum(is.na(d2))
missing=d2[!complete.cases(d2),]
d2$LotFrontage=ifelse(is.na(d2$LotFrontage),
mean(d2$LotFrontage,na.rm=TRUE),
d2$LotFrontage)
#splitting dataset
library(caTools)
split=sample.split(d2$SalePrice,SplitRatio=2/3)
train2=subset(d2,split==TRUE)
test2=subset(d2,split==FALSE)
#scaling
train2[-1]=scale(train2[-1])
test2[-1]=scale(test2[-1])
#Building MLR multiple linear regression
regressor=lm(formula=SalePrice~.,data=train2)
summary(regressor)
d3=read.csv(file.choose())
View(d3)
str(d3)
lapply(d3,summary)
d3=d3[c("Depthm","T_degC","T_prec","R_Depth","R_Temp")]
d3=d3[c("Depthm","T_degC","T_prec","R_Depth","R_TEMP","R_PRES")]
lapply(d3,table)#lapply function will apply table function
#on d3 dataset variables
d3=d3[-3] #table function came up with categories
#in "T_prec" variable which are not required in case of regression
sum(is.na(d3))
lapply(d3,is.na)
lapply(d3,sum(is.na))
lapply(d3,summary)
mean(d3$T_degC,na.rm=T)
d4=data.frame(c(40,50,55,52,NA,NA,NA))
mean(d4,na.rm = T)
d4
mean(d4,na.rm = TRUE)
d4=c(40,50,55,52,NA,NA,NA)
d4
mean(d4,na.rm = TRUE)
40+50+55+52
(40+50+55+52)/4
#calculating the mean of T_degC column after trimming NA values
#and replacing the NA with mean
d3$R_TEMP=ifelse(is.na(d3$R_TEMP),
mean(d3$R_TEMP,na.rm=T),
d3$R_TEMP)
sum(is.na(d3))
#We found only 2 variables are there with NAs i.e. T_degC and R_TEMP
d3$T_degC=ifelse(is.na(d3$T_degC),
mean(d3$T_degC,na.rm=T),
d3$T_degC)
sum(is.na(d3))
cor(T_degC,Depthm)
cor(d3$T_degC,d3$Depthm)
cor(d3$T_degC,d3$R_Depth)
cor(d3$T_degC,d3$R_TEMP)
table(d3)
cor(d3$T_degC,d3$R_PRES)
#Steps to follow:
#Load the dataset, Sales.csv
d1=read.csv(file.choose())
View(d1)
#Excuding unnecessary variables
d1=d1[-1]
#Re-labelling Variables
colnames(d1)=c("Sales","DollarsSpent")
#Correlation between dependent and independent variables
cor(d1$Sales,d1$DollarsSpent)
#missing values
sum(is.na(d1))
table(d1$DollarsSpent)
d3=read.csv(file.choose())
View(d3)
str(d3)
lapply(d3,summary)
d3=d3[c("Depthm","T_degC","T_prec",
"R_Depth","R_TEMP","R_PRES")]
lapply(d3,table)#lapply function will apply table function
#on d3 dataset variables
d3=d3[-3] #table function came up with categories
#in "T_prec" variable which are not required in case of regression
sum(is.na(d3))# to know total count of missing values in whole dataset
lapply(d3,summary)#to know NAs (missing values)
#We found only 2 variables are there with NAs i.e. T_degC and R_TEMP
d3$T_degC=ifelse(is.na(d3$T_degC),
mean(d3$T_degC,na.rm=T),
d3$T_degC)
#calculating the mean of T_degC column after trimming NA values
#and replacing the NA with mean
d3$R_TEMP=ifelse(is.na(d3$R_TEMP),
mean(d3$R_TEMP,na.rm=T),
d3$R_TEMP)
sum(is.na(d3))
cor(d3$T_degC,d3$Depthm)
cor(d3$T_degC,d3$R_Depth)
cor(d3$T_degC,d3$R_TEMP) #
cor(d3$T_degC,d3$R_PRES)
table(d3$T_degC,d3$R_TEMP)
summary(d3$T_degC,d3$R_TEMP)
summary(d3$T_degC)
summary(d3$R_TEMP)
d3=d3[-4]
View(d3)
cor(d3$T_degC,d3$Depthm)
cor(d3$T_degC,d3$R_Depth)
cor(d3$T_degC,d3$R_TEMP) #correlation value 1 means
d3=d3[c(1,2)]
#T_degC, we kept as target or predicted variable
#Depthm is the only independent variable
#split the dataset
library(caTools)
split=sample.split(d3$T_degC,SplitRatio = 0.75)
training=subset(d3,split==TRUE)
split=sample.split(d3$T_degC,SplitRatio = 0.75)
training=subset(d3,split==TRUE)
testing=subset(d3,split==FALSE)
View(training)
View(testing)
#Implement model-SLR
regressor=lm(formula=T_degC~Depthm, data=training)
summary(regressor)
ypred=predict(regressor,testing[1])
library(ModelMetrics)
rmse(ypred,testing[2])
rmse(ypred,testing$T_degC)
setwd("C:/1_Study material/Machine Learning using R/Machine Learning A-Z (Codes and Datasets)/Part 2 - Regression/Section 6 - Polynomial Regression/R")
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
View(dataset)
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
View(dataset)
dataset = dataset[2:3]
View(dataset)
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
lin_reg
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
dataset$Level2
dataset$Level3
dataset$Level4
# Predicting a new result with Linear Regression
predict(lin_reg, data.frame(Level = 6.5))
# Predicting a new result with Polynomial Regression
predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
# Predicting a new result with Linear Regression
y1=predict(lin_reg, data.frame(Level = 6.5))
# Predicting a new result with Polynomial Regression
y2=predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
rmse()
d2=read.csv(file.choose())
d2=d2[c("SalePrice","LotFrontage","GarageArea")]
View(d2)
sum(is.na(d2))
missing=d2[!complete.cases(d2),]
View(missing)
d2$LotFrontage=ifelse(is.na(d2$LotFrontage),
mean(d2$LotFrontage,na.rm=TRUE),
d2$LotFrontage)
#splitting dataset
library(caTools)
split=sample.split(d2$SalePrice,SplitRatio=2/3)
train2=subset(d2,split==TRUE)
test2=subset(d2,split==FALSE)
#scaling
train2[-1]=scale(train2[-1])
test2[-1]=scale(test2[-1])
#Building MLR multiple linear regression
regressor=lm(formula=SalePrice~.,data=train2)
ypred=predict(regressor,test2)
View(train2)
View(d2)
d2$Garage2=d2$GarageArea^2
d2$Garage2=d2$GarageArea^3
d2$Garage2=d2$GarageArea^4
d2$Garage2=d2$GarageArea^2
d2$Garage3=d2$GarageArea^3
d2$Garage4=d2$GarageArea^4
regressor=lm(formula=SalePrice~.,data=train2)
summary(regressor)
d2=read.csv(file.choose())
d2=d2[c("SalePrice","LotFrontage","GarageArea")]
View(d2)
sum(is.na(d2))
missing=d2[!complete.cases(d2),]
View(missing)
d2$LotFrontage=ifelse(is.na(d2$LotFrontage),
mean(d2$LotFrontage,na.rm=TRUE),
d2$LotFrontage)
#splitting dataset
library(caTools)
split=sample.split(d2$SalePrice,SplitRatio=2/3)
train2=subset(d2,split==TRUE)
test2=subset(d2,split==FALSE)
#scaling
train2[-1]=scale(train2[-1])
test2[-1]=scale(test2[-1])
View(train2)
#Building MLR multiple linear regression
regressor1=lm(formula=SalePrice~.,data=train2)
summary(regressor1)
View(test2)
ypred=predict(regressor1,test2[-1])
d2$Garage2=d2$GarageArea^2
d2$Garage3=d2$GarageArea^3
d2$Garage4=d2$GarageArea^4
View(d2)
d2=read.csv(file.choose())
d2=d2[c("SalePrice","LotFrontage","GarageArea")]
View(d2)
sum(is.na(d2))
missing=d2[!complete.cases(d2),]
View(missing)
d2$LotFrontage=ifelse(is.na(d2$LotFrontage),
mean(d2$LotFrontage,na.rm=TRUE),
d2$LotFrontage)
#splitting dataset
library(caTools)
split=sample.split(d2$SalePrice,SplitRatio=2/3)
train2=subset(d2,split==TRUE)
test2=subset(d2,split==FALSE)
#scaling
train2[-1]=scale(train2[-1])
test2[-1]=scale(test2[-1])
View(train2)
View(test2)
#Building MLR multiple linear regression
regressor1=lm(formula=SalePrice~.,data=train2)
summary(regressor1)
ypred=predict(regressor1,test2[-1])
d2$Garage2=d2$GarageArea^2
d2$Garage3=d2$GarageArea^3
d2$Garage4=d2$GarageArea^4
View(d2)
#splitting dataset
library(caTools)
split=sample.split(d2$SalePrice,SplitRatio=2/3)
train3=subset(d2,split==TRUE)
test3=subset(d2,split==FALSE)
#scaling
train3[-1]=scale(train3[-1])
test3[-1]=scale(test3[-1])
View(train3)
View(test3)
regressor2=lm(formula=SalePrice~.,data=train3)
summary(regressor2)
ypred=predict(regressor2,test3[-1])
d2=read.csv(file.choose())
d2=d2[c("SalePrice","LotFrontage","GarageArea")]
View(d2)
sum(is.na(d2))
missing=d2[!complete.cases(d2),]
View(missing)
d2$LotFrontage=ifelse(is.na(d2$LotFrontage),
mean(d2$LotFrontage,na.rm=TRUE),
d2$LotFrontage)
#splitting dataset
library(caTools)
split=sample.split(d2$SalePrice,SplitRatio=2/3)
train2=subset(d2,split==TRUE)
test2=subset(d2,split==FALSE)
#scaling
train2[-1]=scale(train2[-1])
test2[-1]=scale(test2[-1])
View(train2)
View(test2)
#Building MLR multiple linear regression
regressor1=lm(formula=SalePrice~.,data=train2)
summary(regressor1)
ypred1=predict(regressor1,test2[-1])
d2$Garage2=d2$GarageArea^2
d2$Garage3=d2$GarageArea^3
d2$Garage4=d2$GarageArea^4
View(d2)
#splitting dataset
library(caTools)
split=sample.split(d2$SalePrice,SplitRatio=2/3)
train3=subset(d2,split==TRUE)
test3=subset(d2,split==FALSE)
#scaling
train3[-1]=scale(train3[-1])
test3[-1]=scale(test3[-1])
regressor2=lm(formula=SalePrice~.,data=train3)
summary(regressor2)
library(ModelMetrics)
rmse(ypred1,test2$SalePrice)
rmse(ypred2,test3$SalePrice)
ypred2=predict(regressor2,test3[-1])
library(ModelMetrics)
rmse(ypred1,test2$SalePrice)
rmse(ypred2,test3$SalePrice)
d2=read.csv(file.choose())
d2=d2[c("SalePrice","LotFrontage","GarageArea")]
View(d2)
sum(is.na(d2))
missing=d2[!complete.cases(d2),]
View(missing)
d2$LotFrontage=ifelse(is.na(d2$LotFrontage),
mean(d2$LotFrontage,na.rm=TRUE),
d2$LotFrontage)
#splitting dataset
library(caTools)
split=sample.split(d2$SalePrice,SplitRatio=2/3)
train2=subset(d2,split==TRUE)
test2=subset(d2,split==FALSE)
#scaling
train2[-1]=scale(train2[-1])
test2[-1]=scale(test2[-1])
View(train2)
View(test2)
#Building MLR multiple linear regression
regressor1=lm(formula=SalePrice~.,data=train2)
summary(regressor1)
ypred1=predict(regressor1,test2[-1])
d2$LotFrontage2=d2$LotFrontage2^2
d2$LotFrontage3=d2$LotFrontage2^3
d2$LotFrontage4=d2$LotFrontage2^4
View(d2)
d2$LotFrontage2=d2$LotFrontage^2
d2$LotFrontage3=d2$LotFrontage^3
d2$LotFrontage4=d2$LotFrontage^4
View(d2)
#splitting dataset
library(caTools)
split=sample.split(d2$SalePrice,SplitRatio=2/3)
train3=subset(d2,split==TRUE)
test3=subset(d2,split==FALSE)
#scaling
train3[-1]=scale(train3[-1])
test3[-1]=scale(test3[-1])
View(train3)
regressor2=lm(formula=SalePrice~.,data=train3)
summary(regressor2)
ypred2=predict(regressor2,test3[-1])
library(ModelMetrics)
rmse(ypred1,test2$SalePrice)
rmse(ypred2,test3$SalePrice)
