subject_name <- c("John Doe", "Jane Doe", "Steve Graves")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)
temperature
subject_name <- c("John Doe", "Jane Doe", "Steve Graves")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)
temperature[2]
subject_name <- c("John Doe", "Jane Doe", "Steve Graves")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)
subject_name[1]
temperature[2]
flu_status[1]
temperature[2:3]
temperature[0:3]
temperature[1:3]
temperature[ :3]
temperature[2:3]
gender <- factor(c("MALE", "FEMALE", "MALE"))
gender <- factor(c("MALE", "FEMALE", "MALE"))
gender
gender <- factor(c("MALE", "FEMALE", "MALE", "FEMALE", "MALE"))
gender
blood <- factor(c("O", "AB", "A"),
levels = c("A", "B", "AB", "O"))
blood <- factor(c("O", "AB", "A"),
levels = c("A", "B", "AB", "O"))
blood
blood = factor(c("O", "AB", "A"),
levels = c("A", "B", "AB", "O"))
blood
subject1 <- list(fullname = subject_name[1],
temperature = temperature[1],
flu_status = flu_status[1],
gender = gender[1],
blood = blood[1])
subject1
subject1$temperature
pt_data <- data.frame(subject_name, temperature, flu_status,
gender, blood, stringsAsFactors = FALSE)
pt_data
subject_name <- c("John Doe", "Jane Doe", "Steve Graves")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)
subject_name[1]
temperature[2]
flu_status[1]
temperature[2:3]
gender <- factor(c("MALE", "FEMALE", "MALE", "FEMALE", "MALE"))
gender
blood = factor(c("O", "AB", "A"),
levels = c("A", "B", "AB", "O"))
blood
subject1 <- list(fullname = subject_name[1],
temperature = temperature[1],
flu_status = flu_status[1],
gender = gender[1],
blood = blood[1])
subject1
subject1$temperature
pt_data <- data.frame(subject_name, temperature, flu_status,
gender, blood, stringsAsFactors = FALSE)
pt_data
pt_data <- data.frame(subject_name, temperature, flu_status,
gender, blood, stringsAsFactors = FALSE)
str(pt_data)
subject_name <- c("John Doe", "Jane Doe", "Steve Graves")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)
subject_name[1]
temperature[2]
flu_status[1]
temperature[2:3]
gender <- factor(c("MALE", "FEMALE", "MALE", "FEMALE", "MALE"))
gender
blood = factor(c("O", "AB", "A"),
levels = c("A", "B", "AB", "O"))
blood
subject1 <- list(fullname = subject_name[1],
temperature = temperature[1],
flu_status = flu_status[1],
gender = gender[1],
blood = blood[1])
subject1
subject1$temperature
data <- data.frame(subject_name, temperature, flu_status,
gender, blood, stringsAsFactors = FALSE)
data
subject_name <- c("John Doe", "Jane Doe", "Steve Graves")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)
subject_name[1]
temperature[2]
flu_status[1]
temperature[2:3]
gender <- factor(c("MALE", "FEMALE", "MALE", "FEMALE", "MALE"))
gender
blood = factor(c("O", "AB", "A"),
levels = c("A", "B", "AB", "O"))
blood
subject1 <- list(fullname = subject_name[1],
temperature = temperature[1],
flu_status = flu_status[1],
gender = gender[1],
blood = blood[1])
subject1
subject1$temperature
data1 <- data.frame(subject_name, temperature, flu_status,
gender, blood, stringsAsFactors = FALSE)
data1
subject_name <- c("John Doe", "Jane Doe", "Steve Graves")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)
subject_name[1]
temperature[2]
flu_status[1]
temperature[2:3]
gender <- factor(c("MALE", "FEMALE", "MALE", "FEMALE", "MALE"))
gender
blood = factor(c("O", "AB", "A"),
levels = c("A", "B", "AB", "O"))
blood
data1 <- data.frame(subject_name, temperature, flu_status,
gender, blood, stringsAsFactors = FALSE)
data1
subject_name <- c("John Doe", "Jane Doe", "Steve Graves")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)
gender <- factor(c("MALE", "FEMALE", "MALE", "FEMALE", "MALE"))
blood = factor(c("O", "AB", "A"),
levels = c("A", "B", "AB", "O"))
data1 <- data.frame(subject_name, temperature, flu_status,
gender, blood, stringsAsFactors = FALSE)
data1
subject_name <- c("John Doe", "Jane Doe", "Steve Graves")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)
gender <- factor(c("MALE", "FEMALE", "MALE"))
blood = factor(c("O", "AB", "A"),
levels = c("A", "B", "AB", "O"))
data1 <- data.frame(subject_name, temperature, flu_status,
gender, blood, stringsAsFactors = FALSE)
data1
pt_data[, 1]
data1[, 1]
data1[1,]
data1[,]
m <- matrix(c('a', 'b', 'c', 'd'), nrow = 2)
m
data = read.csv(file.choose())
summary(data)
data$Outcome=factor(data$Outcome, levels=c(0,1))
split= sample.split(data$Outcome,SplitRatio=0.85)
training_set=subset(data,split==TRUE)
test_set=subset(data,split==FALSE)
colnames(training_set)
library(caTools)
data$Outcome=factor(data$Outcome, levels=c(0,1))
split= sample.split(data$Outcome,SplitRatio=0.85)
training_set=subset(data,split==TRUE)
test_set=subset(data,split==FALSE)
colnames(training_set)
training_set[-9]=scale(training_set[-9])
test_set[-9]=scale(test_set[-9])
head(training_set[-9],4)
library(rpart)
fit_model = rpart(Outcome~., training_set)
y_pred=predict(fit_model,test_set[-9],type='class')
cm=table(test_set[,9],y_pred)
cm
library(caret)
confusionMatrix(cm)
library(class)
y_pred = knn(train = training_set[,-9],test = test_set[,-9],
cl=training_set[,9],k=5)
cm = table(test_set[,9],y_pred)
cm
confusionMatrix(cm)
library(e1071)
fit_naive=naiveBayes(x=training_set[-9],
y=training_set$Outcome)
y_pred=predict(fit_naive,newdata=test_set[-9])
#6. Calculating confusion matrix
cm=table(test_set[,9],y_pred)
cm
confusionMatrix(cm)
# Random Forest Classification
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Handling missing values and analysing the dataset
sum(is.na(dataset))
head(dataset,5)
tail(dataset,9)
str(dataset)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-3],
y = training_set$Purchased,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
library(caret)
confusionMatrix(cm)
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, grid_set)
plot(set[, -3],
main = 'Random Forest Classification (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, grid_set)
plot(set[, -3], main = 'Random Forest Classification (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Choosing the number of trees
plot(classifier)
setwd("~/R/Machine Learning A-Z (Codes and Datasets)/Part 3 - Classification/Section 20 - Random Forest Classification/R")
# Random Forest Classification
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Handling missing values and analysing the dataset
sum(is.na(dataset))
head(dataset,5)
tail(dataset,9)
str(dataset)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-3],
y = training_set$Purchased,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
library(caret)
confusionMatrix(cm)
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, grid_set)
plot(set[, -3],
main = 'Random Forest Classification (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, grid_set)
plot(set[, -3], main = 'Random Forest Classification (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Choosing the number of trees
plot(classifier)
library(MASS)
library(neuralnet)
we can get same values everytime
set.seed(123)
DataFrame<-Boston
help("Boston")
str(DataFrame)
View(DataFrame)
hist(DataFrame$medv)
dim(DataFrame)
apply(DataFrame,2,range)
maxValue=apply(DataFrame,2,max)
maxValue
minValue=apply(DataFrame, 2, min)
minValue
DataFrame = as.data.frame(scale(DataFrame,center = minValue,
scale = maxValue-minValue))
x=sample(1:nrow(DataFrame),400)
x
train = DataFrame[x,]
test = DataFrame[-x,]
neuralmodel = neuralnet(medv ~.,hidden = c(4,2),
data = train)
plot(neuralmodel)
